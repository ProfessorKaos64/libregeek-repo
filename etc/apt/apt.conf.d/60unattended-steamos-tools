// Unattended-Upgrade::Origins-Pattern controls which packages are
// upgraded.
//
// Lines below have the format format is "keyword=value,...".  A
// package will be upgraded only if the values in its metadata match
// all the supplied keywords in a line.  (In other words, omitted
// keywords are wild cards.) The keywords originate from the Release
// file, but several aliases are accepted.  The accepted keywords are:
//   a,archive,suite (eg, "stable")
//   c,component     (eg, "main", "crontrib", "non-free")
//   l,label         (eg, "Debian", "Debian-Security")
//   o,origin        (eg, "Debian", "Unofficial Multimedia Packages")
//   n,codename      (eg, "jessie", "jessie-updates")
//     site          (eg, "http.debian.net")
// The available values on the system are printed by the command
// "apt-cache policy", and can be debugged by running
// "unattended-upgrades -d" and looking at the log file.
//
// Within lines unattended-upgrades allows 2 macros whose values are
// derived from /etc/debian_version:
//   ${distro_id}            Installed origin.
//   ${distro_codename}      Installed codename (eg, "jessie")
        // Codename based matching:
        // This will follow the migration of a release through different
        // archives (e.g. from testing to stable and later oldstable).
//      "o=Debian,n=jessie";
//      "o=Debian,n=jessie-updates";
//      "o=Debian,n=jessie-proposed-updates";
//      "o=Debian,n=jessie,l=Debian-Security";

##########################################
# Main rules
##########################################

APT::Periodic::Unattended-Upgrade "1";
APT::Periodic::Download-Upgradeable-Packages "1";
APT::Periodic::AutocleanInterval "5";
// Automatically upgrade packages from these (origin:archive) pairs
Unattended-Upgrade::Origins-Pattern {
        "origin=steamos-tools,label=Custom SteamOS-Tools Debian Repository";
        "origin=steamos-tools,label=Custom SteamOS-Tools Debian Repository (testing)";
        "origin=Debian,label=Debian";
        //"origin=Debian Backports,label=Debian Backports";
};
Unattended-Upgrade::InstallOnShutdown "true";

##########################################
# Debian default stock options
##########################################

# Sourced from: cfgs/apt/orig_unattended_*/apt.conf.d.orig/50unattended-upgrades
# See:          https://www.debian.org/doc/debian-policy/ap-pkg-conffiles.html

// List of packages to not update (regexp are supported)
Unattended-Upgrade::Package-Blacklist {
//	"vim";
//	"libc6";
};

// This option allows you to control if on a unclean dpkg exit
// unattended-upgrades will automatically run 
//   dpkg --force-confold --configure -a
// The default is true, to ensure updates keep getting installed
//Unattended-Upgrade::AutoFixInterruptedDpkg "false";

// Split the upgrade into the smallest possible chunks so that
// they can be interrupted with SIGUSR1. This makes the upgrade
// a bit slower but it has the benefit that shutdown while a upgrade
// is running is possible (with a small delay)
//Unattended-Upgrade::MinimalSteps "true";

// Install all unattended-upgrades when the machine is shuting down
// instead of doing it in the background while the machine is running
// This will (obviously) make shutdown slower
//Unattended-Upgrade::InstallOnShutdown "true";

// Send email to this address for problems or packages upgrades
// If empty or unset then no email is sent, make sure that you
// have a working mail setup on your system. A package that provides
// 'mailx' must be installed. E.g. "user@example.com"
//Unattended-Upgrade::Mail "root";

// Set this value to "true" to get emails only on errors. Default
// is to always send a mail if Unattended-Upgrade::Mail is set
//Unattended-Upgrade::MailOnlyOnError "true";

// Do automatic removal of new unused dependencies after the upgrade
// (equivalent to apt-get autoremove)
//Unattended-Upgrade::Remove-Unused-Dependencies "false";

// Automatically reboot *WITHOUT CONFIRMATION* if
//  the file /var/run/reboot-required is found after the upgrade 
//Unattended-Upgrade::Automatic-Reboot "false";

// Automatically reboot even if there are users currently logged in.
//Unattended-Upgrade::Automatic-Reboot-WithUsers "true";

// If automatic reboot is enabled and needed, reboot at the specific
// time instead of immediately
//  Default: "now"
//Unattended-Upgrade::Automatic-Reboot-Time "02:00";

// Use apt bandwidth limit feature, this example limits the download
// speed to 70kb/sec
//Acquire::http::Dl-Limit "70";

##########################################
# APT tweaks 
##########################################

// Forget about any pre-prepared upgrades whenever a new package list
// is downloaded, or whenever packages are installed or removed,
// since either of these might invalidate the upgrade
APT::Update::Pre-Invoke {
	"rm -f /var/run/unattended-upgrades/ready.json";
};

##########################################
# DPKG tweaks 
##########################################

DPkg::Pre-Invoke {
        "rm -f /var/run/unattended-upgrades/ready.json";
};

########################
# Definitions
########################

# --force-confold: 
#        do not modify the current configuration file, the new version is installed with a 
#        .dpkg-dist suffix. With this option alone, even configuration files that you have 
#        not modified are left untouched. You need to combine it with --force-confdef to let 
#        dpkg overwrite configuration files that you have not modified.
#        
# --force-confnew: always install the new version of the configuration file, the current version
#        is kept in a file with the .dpkg-old suffix.
#        
# --force-confdef: 
#        ask dpkg to decide alone when it can and prompt otherwise. 
#        This is the default behavior of dpkg and this option is mainly useful 
#        in combination with --force-confold.
#        
# --force-confmiss: ask dpkg to install the configuration file if itâ€™s currently missing 
#        (for example because you have removed the file by mistake).
#

########################
# Set default behavior
########################

# Force to use the new package configuration file
Dpkg::Options {
   "--force-confnew";
}

##########################################
# Additional reading and information
##########################################
# See: https://github.com/ProfessorKaos64/SteamOS-Tools/wiki/Unattended-Upgrades


########################
# Hacks
########################

# Until I find a better way of detecting when updates were last checked,
# Add a small hack here

rm /var/log/steamos-tools-updates
touch /var/log/steamos-tools-updates
